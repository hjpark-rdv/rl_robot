<?xml version="1.0" ?>
<!-- =================================================================================== -->
<!-- |    This document was autogenerated by xacro from tomato_robot.xacro             | -->
<!-- |    EDITING THIS FILE BY HAND IS NOT RECOMMENDED                                 | -->
<!-- =================================================================================== -->
<robot name="ur3e_robot">
  <!--
    Base UR robot series xacro macro.

    NOTE: this is NOT a URDF. It cannot directly be loaded by consumers
    expecting a flattened '.urdf' file. See the top-level '.xacro' for that
    (but note: that .xacro must still be processed by the xacro command).

    For use in '.launch' files: use one of the 'load_urX.launch' convenience
    launch files.

    This file models the base kinematic chain of a UR robot, which then gets
    parameterised by various configuration files to convert it into a UR3(e),
    UR5(e), UR10(e), UR16e, UR20 or UR30.

    NOTE: the default kinematic parameters (ie: link lengths, frame locations,
    offets, etc) do not correspond to any particular robot. They are defaults
    only. There WILL be non-zero offsets between the Forward Kinematics results
    in TF (ie: robot_state_publisher) and the values reported by the Teach
    Pendant.

    For accurate (and robot-specific) transforms, the 'kinematics_parameters_file'
    parameter MUST point to a .yaml file containing the appropriate values for
    the targetted robot.

    If using the UniversalRobots/Universal_Robots_ROS_Driver, follow the steps
    described in the readme of that repository to extract the kinematic
    calibration from the controller and generate the required .yaml file.

    Main author of the migration to yaml configs: Ludovic Delval.

    Contributors to previous versions (in no particular order):

     - Felix Messmer
     - Kelsey Hawkins
     - Wim Meeussen
     - Shaun Edwards
     - Nadia Hammoudeh Garcia
     - Dave Hershberger
     - G. vd. Hoorn
     - Philip Long
     - Dave Coleman
     - Miguel Prada
     - Mathias Luedtke
     - Marcel Schnirring
     - Felix von Drigalski
     - Felix Exner
     - Jimmy Da Silva
     - Ajit Krisshna N L
     - Muhammad Asif Rana
  -->
  <!--
    NOTE: the macro defined in this file is NOT part of the public API of this
          package. Users CANNOT rely on this file being available, or stored in
          this location. Nor can they rely on the existence of the macro.
  -->
  <transmission name="shoulder_pan_trans">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="shoulder_pan_joint">
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
    </joint>
    <actuator name="shoulder_pan_motor">
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>
  <transmission name="shoulder_lift_trans">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="shoulder_lift_joint">
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
    </joint>
    <actuator name="shoulder_lift_motor">
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>
  <transmission name="elbow_trans">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="elbow_joint">
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
    </joint>
    <actuator name="elbow_motor">
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>
  <transmission name="wrist_1_trans">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="wrist_1_joint">
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
    </joint>
    <actuator name="wrist_1_motor">
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>
  <transmission name="wrist_2_trans">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="wrist_2_joint">
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
    </joint>
    <actuator name="wrist_2_motor">
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>
  <transmission name="wrist_3_trans">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="wrist_3_joint">
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
    </joint>
    <actuator name="wrist_3_motor">
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>
  <!-- links: main serial chain -->
  <link name="base_link">
    <inertial>
      <mass value="0.1"/> <!-- 더미 링크로 최소 질량 -->
      <inertia ixx="0.001" ixy="0" ixz="0" iyy="0.001" iyz="0" izz="0.001"/>
    </inertial>
  </link>
  <link name="base_link_inertia">
    <visual>
      <origin rpy="0 0 3.141592653589793" xyz="0 0 0"/>
      <geometry>
        <mesh filename="/home/rdv/docker_share/tomato_robot/ur_gazebo_ppo_robot/src/universal_robot/ur_description/meshes/ur3e/visual/base.dae"/>
      </geometry>
      <material name="LightGrey">
        <color rgba="0.7 0.7 0.7 1.0"/>
      </material>
    </visual>
    <collision>
      <origin rpy="0 0 3.141592653589793" xyz="0 0 0"/>
      <geometry>
        <mesh filename="/home/rdv/docker_share/tomato_robot/ur_gazebo_ppo_robot/src/universal_robot/ur_description/meshes/ur3e/collision/base.stl"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="2.0"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.0030531654454" ixy="0.0" ixz="0.0" iyy="0.0030531654454" iyz="0.0" izz="0.005625"/>
    </inertial>
  </link>
  <link name="shoulder_link">
    <visual>
      <origin rpy="0 0 3.141592653589793" xyz="0 0 0"/>
      <geometry>
        <mesh filename="/home/rdv/docker_share/tomato_robot/ur_gazebo_ppo_robot/src/universal_robot/ur_description/meshes/ur3e/visual/shoulder.dae"/>
      </geometry>
      <material name="LightGrey">
        <color rgba="0.7 0.7 0.7 1.0"/>
      </material>
    </visual>
    <collision>
      <origin rpy="0 0 3.141592653589793" xyz="0 0 0"/>
      <geometry>
        <mesh filename="/home/rdv/docker_share/tomato_robot/ur_gazebo_ppo_robot/src/universal_robot/ur_description/meshes/ur3e/collision/shoulder.stl"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="2.0"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.008093163429399999" ixy="0.0" ixz="0.0" iyy="0.008093163429399999" iyz="0.0" izz="0.005625"/>
    </inertial>
  </link>
  <link name="upper_arm_link">
    <visual>
      <origin rpy="1.5707963267948966 0 -1.5707963267948966" xyz="0 0 0.12"/>
      <geometry>
        <mesh filename="/home/rdv/docker_share/tomato_robot/ur_gazebo_ppo_robot/src/universal_robot/ur_description/meshes/ur3e/visual/upperarm.dae"/>
      </geometry>
      <material name="LightGrey">
        <color rgba="0.7 0.7 0.7 1.0"/>
      </material>
    </visual>
    <collision>
      <origin rpy="1.5707963267948966 0 -1.5707963267948966" xyz="0 0 0.12"/>
      <geometry>
        <mesh filename="/home/rdv/docker_share/tomato_robot/ur_gazebo_ppo_robot/src/universal_robot/ur_description/meshes/ur3e/collision/upperarm.stl"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="3.42"/>
      <origin rpy="0 1.5707963267948966 0" xyz="-0.121825 0.0 0.12"/>
      <inertia ixx="0.021728483221103233" ixy="0.0" ixz="0.0" iyy="0.021728483221103233" iyz="0.0" izz="0.00961875"/>
    </inertial>
  </link>
  <link name="forearm_link">
    <visual>
      <origin rpy="1.5707963267948966 0 -1.5707963267948966" xyz="0 0 0.027"/>
      <geometry>
        <mesh filename="/home/rdv/docker_share/tomato_robot/ur_gazebo_ppo_robot/src/universal_robot/ur_description/meshes/ur3e/visual/forearm.dae"/>
      </geometry>
      <material name="LightGrey">
        <color rgba="0.7 0.7 0.7 1.0"/>
      </material>
    </visual>
    <collision>
      <origin rpy="1.5707963267948966 0 -1.5707963267948966" xyz="0 0 0.027"/>
      <geometry>
        <mesh filename="/home/rdv/docker_share/tomato_robot/ur_gazebo_ppo_robot/src/universal_robot/ur_description/meshes/ur3e/collision/forearm.stl"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="1.26"/>
      <origin rpy="0 1.5707963267948966 0" xyz="-0.1066 0.0 0.027"/>
      <inertia ixx="0.0065445675821719194" ixy="0.0" ixz="0.0" iyy="0.0065445675821719194" iyz="0.0" izz="0.00354375"/>
    </inertial>
  </link>
  <link name="wrist_1_link">
    <visual>
      <!-- TODO: Move this to a parameter -->
      <origin rpy="1.5707963267948966 0 0" xyz="0 0 -0.104"/>
      <geometry>
        <mesh filename="/home/rdv/docker_share/tomato_robot/ur_gazebo_ppo_robot/src/universal_robot/ur_description/meshes/ur3e/visual/wrist1.dae"/>
      </geometry>
      <material name="LightGrey">
        <color rgba="0.7 0.7 0.7 1.0"/>
      </material>
    </visual>
    <collision>
      <origin rpy="1.5707963267948966 0 0" xyz="0 0 -0.104"/>
      <geometry>
        <mesh filename="/home/rdv/docker_share/tomato_robot/ur_gazebo_ppo_robot/src/universal_robot/ur_description/meshes/ur3e/collision/wrist1.stl"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="0.8"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.002084999166" ixy="0.0" ixz="0.0" iyy="0.002084999166" iyz="0.0" izz="0.00225"/>
    </inertial>
  </link>
  <link name="wrist_2_link">
    <visual>
      <origin rpy="0 0 0" xyz="0 0 -0.08535"/>
      <geometry>
        <mesh filename="/home/rdv/docker_share/tomato_robot/ur_gazebo_ppo_robot/src/universal_robot/ur_description/meshes/ur3e/visual/wrist2.dae"/>
      </geometry>
      <material name="LightGrey">
        <color rgba="0.7 0.7 0.7 1.0"/>
      </material>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 -0.08535"/>
      <geometry>
        <mesh filename="/home/rdv/docker_share/tomato_robot/ur_gazebo_ppo_robot/src/universal_robot/ur_description/meshes/ur3e/collision/wrist2.stl"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="0.8"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.002084999166" ixy="0.0" ixz="0.0" iyy="0.002084999166" iyz="0.0" izz="0.00225"/>
    </inertial>
  </link>
  <link name="wrist_3_link">
    <visual>
      <origin rpy="1.5707963267948966 0 0" xyz="0 0 -0.0921"/>
      <geometry>
        <mesh filename="/home/rdv/docker_share/tomato_robot/ur_gazebo_ppo_robot/src/universal_robot/ur_description/meshes/ur3e/visual/wrist3.dae"/>
      </geometry>
      <material name="LightGrey">
        <color rgba="0.7 0.7 0.7 1.0"/>
      </material>
    </visual>
    <collision>
      <origin rpy="1.5707963267948966 0 0" xyz="0 0 -0.0921"/>
      <geometry>
        <mesh filename="/home/rdv/docker_share/tomato_robot/ur_gazebo_ppo_robot/src/universal_robot/ur_description/meshes/ur3e/collision/wrist3.stl"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="0.35"/>
      <origin rpy="0 0 0" xyz="0.0 0.0 -0.02"/>
      <inertia ixx="0.00013626661215999998" ixy="0.0" ixz="0.0" iyy="0.00013626661215999998" iyz="0.0" izz="0.0001792"/>
    </inertial>
  </link>
  <!-- joints: main serial chain -->
  <joint name="base_link-base_link_inertia" type="fixed">
    <parent link="base_link"/>
    <child link="base_link_inertia"/>
    <!-- 'base_link' is REP-103 aligned (so X+ forward), while the internal
           frames of the robot/controller have X+ pointing backwards.
           Use the joint between 'base_link' and 'base_link_inertia' (a dummy
           link/frame) to introduce the necessary rotation over Z (of pi rad).
      -->
    <origin rpy="0 0 3.141592653589793" xyz="0 0 0"/>
  </joint>
  <joint name="shoulder_pan_joint" type="revolute">
    <parent link="base_link_inertia"/>
    <child link="shoulder_link"/>
    <origin rpy="0 0 0" xyz="0 0 0.15185"/>
    <axis xyz="0 0 1"/>
    <limit effort="56.0" lower="-3.141592653589793" upper="3.141592653589793" velocity="3.141592653589793"/>
    <dynamics damping="0" friction="0"/>
  </joint>
  <joint name="shoulder_lift_joint" type="revolute">
    <parent link="shoulder_link"/>
    <child link="upper_arm_link"/>
    <origin rpy="1.570796327 0 0" xyz="0 0 0"/>
    <axis xyz="0 0 1"/>
    <limit effort="56.0" lower="-3.141592653589793" upper="3.141592653589793" velocity="3.141592653589793"/>
    <dynamics damping="0" friction="0"/>
  </joint>
  <joint name="elbow_joint" type="revolute">
    <parent link="upper_arm_link"/>
    <child link="forearm_link"/>
    <origin rpy="0 0 0" xyz="-0.24355 0 0"/>
    <axis xyz="0 0 1"/>
    <limit effort="28.0" lower="-3.141592653589793" upper="3.141592653589793" velocity="3.141592653589793"/>
    <dynamics damping="0" friction="0"/>
  </joint>
  <joint name="wrist_1_joint" type="revolute">
    <parent link="forearm_link"/>
    <child link="wrist_1_link"/>
    <origin rpy="0 0 0" xyz="-0.2132 0 0.13105"/>
    <axis xyz="0 0 1"/>
    <limit effort="12.0" lower="-3.141592653589793" upper="3.141592653589793" velocity="3.141592653589793"/>
    <dynamics damping="0" friction="0"/>
  </joint>
  <joint name="wrist_2_joint" type="revolute">
    <parent link="wrist_1_link"/>
    <child link="wrist_2_link"/>
    <origin rpy="1.570796327 0 0" xyz="0 -0.08535 -1.750557762378351e-11"/>
    <axis xyz="0 0 1"/>
    <limit effort="12.0" lower="-3.141592653589793" upper="3.141592653589793" velocity="3.141592653589793"/>
    <dynamics damping="0" friction="0"/>
  </joint>
  <joint name="wrist_3_joint" type="revolute">
    <parent link="wrist_2_link"/>
    <child link="wrist_3_link"/>
    <origin rpy="1.570796326589793 3.141592653589793 3.141592653589793" xyz="0 0.0921 -1.8890025766262e-11"/>
    <axis xyz="0 0 1"/>
    <limit effort="12.0" lower="-3.141592653589793" upper="3.141592653589793" velocity="3.141592653589793"/>
    <dynamics damping="0" friction="0"/>
  </joint>
  <!-- ROS-Industrial 'base' frame: base_link to UR 'Base' Coordinates transform -->
  <link name="base">
    <inertial>
      <mass value="0.1"/> <!-- 더미 링크 -->
      <inertia ixx="0.001" ixy="0" ixz="0" iyy="0.001" iyz="0" izz="0.001"/>
    </inertial>
  </link>
  <joint name="base_link-base_fixed_joint" type="fixed">
    <!-- Note the rotation over Z of pi radians: as base_link is REP-103
           aligned (ie: has X+ forward, Y+ left and Z+ up), this is needed
           to correctly align 'base' with the 'Base' coordinate system of
           the UR controller.
      -->
    <origin rpy="0 0 3.141592653589793" xyz="0 0 0"/>
    <parent link="base_link"/>
    <child link="base"/>
  </joint>
  <!-- ROS-Industrial 'flange' frame: attachment point for EEF models -->
  <link name="flange">
    <inertial>
      <mass value="0.05"/> <!-- 플랜지 가볍게 -->
      <inertia ixx="0.0005" ixy="0" ixz="0" iyy="0.0005" iyz="0" izz="0.0005"/>
    </inertial>
  </link>
  <joint name="wrist_3-flange" type="fixed">
    <parent link="wrist_3_link"/>
    <child link="flange"/>
    <origin rpy="0 -1.5707963267948966 -1.5707963267948966" xyz="0 0 0"/>
  </joint>
  <!-- ROS-Industrial 'tool0' frame: all-zeros tool frame -->
  <link name="tool0">
    <inertial>
      <mass value="0.05"/> <!-- 툴 가볍게 -->
      <inertia ixx="0.0005" ixy="0" ixz="0" iyy="0.0005" iyz="0" izz="0.0005"/>
    </inertial>
  </link>
  <joint name="flange-tool0" type="fixed">
    <!-- default toolframe: X+ left, Y+ up, Z+ front -->
    <origin rpy="1.5707963267948966 0 1.5707963267948966" xyz="0 0 0"/>
    <parent link="flange"/>
    <child link="tool0"/>
  </joint>
  <!-- 더미 월드 링크 -->
  <link name="world_link">
    <inertial>
      <mass value="0.01"/> <!-- 월드 더미 -->
      <inertia ixx="0.0001" ixy="0" ixz="0" iyy="0.0001" iyz="0" izz="0.0001"/>
    </inertial>
  </link>
  <!-- 베이스 플레이트 링크 (무겁고 단단한 재질) -->
  <link name="base_plate">
    <visual>
      <geometry>
        <box size="1.0 1.0 0.05"/>
      </geometry>
      <material name="steel">
        <color rgba="0.3 0.3 0.3 1.0"/>
      </material>
    </visual>
    <collision>
      <geometry>
        <box size="1.0 1.0 0.05"/>
      </geometry>
      <surface>
        <friction>
          <ode>
            <mu>1.0</mu>
            <mu2>1.0</mu2>
          </ode>
        </friction>
        <contact>
          <ode>
            <kp>1e8</kp>
            <kd>1e4</kd>
          </ode>
        </contact>
      </surface>
    </collision>
    <inertial>
      <mass value="1000.0"/>
      <inertia ixx="83.354" ixy="0.0" ixz="0.0" iyy="83.354" iyz="0.0" izz="166.667"/>
    </inertial>
  </link>
  <!-- world_link와 base_plate 연결 -->
  <joint name="world_to_base_plate" type="fixed">
    <parent link="world_link"/>
    <child link="base_plate"/>
    <origin rpy="0 0 0" xyz="0 0 0"/>
  </joint>
  <!-- base_plate와 base_link 연결 -->
  <joint name="base_plate_to_base_link" type="fixed">
    <parent link="base_plate"/>
    <child link="base_link"/>
    <origin rpy="0 0 0" xyz="0 0 0.025"/>
  </joint>
  <!-- 스탠드 링크 -->
  <link name="stand_base">
    <visual>
      <geometry>
        <box size="0.02 0.02 0.5"/>
        <!-- 1m 높이 스탠드 -->
      </geometry>
      <material name="silver">
        <color rgba="0.75 0.75 0.75 1.0"/>
      </material>
    </visual>
    <collision>
      <geometry>
        <box size="0.02 0.02 0.5"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="5.0"/>
      <inertia ixx="0.416" ixy="0.0" ixz="0.0" iyy="0.416" iyz="0.0" izz="0.833"/>
    </inertial>
  </link>
  <!-- world_link와 stand_base 연결 -->
  <joint name="world_to_stand" type="fixed">
    <parent link="world_link"/>
    <child link="stand_base"/>
    <origin rpy="0 0 0" xyz="0.0 0.52 0.3"/>
    <!-- 로봇 옆으로 이동 -->
  </joint>
  <!-- 카메라 링크 -->
  <link name="camera_link">
    <visual>
      <geometry>
        <box size="0.05 0.05 0.05"/>
      </geometry>
    </visual>
    <inertial>
      <mass value="0.2"/> <!-- 카메라 무게 -->
      <inertia ixx="0.0005" ixy="0" ixz="0" iyy="0.0005" iyz="0" izz="0.0005"/>
    </inertial>
  </link>
  <joint name="stand_to_camera" type="fixed">
    <parent link="stand_base"/>
    <child link="camera_link"/>
    <origin rpy="0 0.4 -0.7" xyz="0 0.0 0.25"/>
    <!-- 스탠드 위쪽 -->
  </joint>
  <!-- 새로운 depth_link 정의 -->
  <link name="depth_link">
    <inertial>
      <mass value="0.01"/> <!-- 더미 -->
      <inertia ixx="0.0001" ixy="0" ixz="0" iyy="0.0001" iyz="0" izz="0.0001"/>
    </inertial>
  </link>
  <!-- camera_link와 depth_link 연결 -->
  <joint name="camera_to_depth" type="fixed">
    <parent link="camera_link"/>
    <child link="depth_link"/>
    <origin rpy="-1.57 0 -1.57" xyz="0.0 0 0.0"/>
    <!-- 기본적으로 동일한 위치와 방향 -->
  </joint>
  <!-- 관 링크 (gripper_tube) 정의 -->
  <link name="gripper_tube">
    <visual>
      <geometry>
        <cylinder length="0.1" radius="0.02"/>
        <!-- 길이 10cm로 변경 -->
      </geometry>
      <origin rpy="0 0 0" xyz="0 0 0.05"/>
      <!-- 중심을 관의 중간에 (0.1m / 2) -->
      <material name="gray">
        <color rgba="0.5 0.5 0.5 1.0"/>
      </material>
    </visual>
    <collision>
      <geometry>
        <cylinder length="0.1" radius="0.02"/>
        <!-- 길이 10cm로 변경 -->
      </geometry>
      <origin rpy="0 0 0" xyz="0 0 0.05"/>
    </collision>
    <inertial>
      <mass value="0.25"/>
      <!-- 질량 절반으로 감소 (비례 조정) -->
      <inertia ixx="0.0005" ixy="0.0" ixz="0.0" iyy="0.0005" iyz="0.0" izz="0.00025"/>
    </inertial>
  </link>
  <!-- tool0와 gripper_tube 연결 -->
  <joint name="tool0_to_gripper_tube" type="fixed">
    <parent link="tool0"/>
    <child link="gripper_tube"/>
    <origin rpy="0 0 0" xyz="0 0 0"/>
  </joint>
  <!-- 새로운 end_effector 링크 정의 (더미 링크) -->
  <link name="end_effector">
    <visual>
      <geometry>
        <sphere radius="0.01"/>
      </geometry>
      <material name="green">
        <color rgba="0 1 0 1"/>
      </material>
    </visual>
    <inertial>
      <mass value="0.05"/> <!-- 엔드 이펙터 가볍게 -->
      <inertia ixx="0.0001" ixy="0" ixz="0" iyy="0.0001" iyz="0" izz="0.0001"/>
    </inertial>
  </link>
  <!-- gripper_tube와 end_effector 연결 -->
  <joint name="gripper_tube_to_end_effector" type="fixed">
    <parent link="gripper_tube"/>
    <child link="end_effector"/>
    <origin rpy="0 0 0" xyz="0 0 0.1"/>
    <!-- 관 끝부분 (길이 10cm) -->
  </joint>
  <!-- Gazebo 설정 -->
  <gazebo reference="camera_link">
    <sensor name="rgbd_camera" type="depth">
      <update_rate>30.0</update_rate>
      <camera>
        <horizontal_fov>1.047</horizontal_fov>
        <image>
          <width>640</width>
          <height>480</height>
          <format>R8G8B8</format>
        </image>
        <depth>
          <range>
            <min>0.1</min>
            <max>5.0</max>
          </range>
        </depth>
      </camera>
      <plugin filename="libgazebo_ros_openni_kinect.so" name="depth_camera_controller">
        <baseline>0.1</baseline>
        <alwaysOn>true</alwaysOn>
        <updateRate>30.0</updateRate>
        <cameraName>camera</cameraName>
        <frameName>depth_link</frameName>
        <pointCloudCutoff>0.1</pointCloudCutoff>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo>
  <gazebo>
    <plugin filename="libgazebo_ros_control.so" name="gazebo_ros_control">
      <robotNamespace>/ur3e</robotNamespace>
      <robotSimType>gazebo_ros_control/DefaultRobotHWSim</robotSimType>
    </plugin>
  </gazebo>
</robot>

